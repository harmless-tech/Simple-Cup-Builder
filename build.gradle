import org.gradle.internal.os.OperatingSystem

plugins {
    id "java"
    id "idea"
    id "application"

    id "com.github.gmazzo.buildconfig" version "2.0.2"
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id "com.github.spotbugs" version "4.6.0"
    id "org.beryx.jlink" version "2.22.3"
}

group "tech.harmless.simplecupbuilder"
version "0.0.1-ALPHA"

sourceCompatibility = 15
targetCompatibility = 15

buildConfig {
    className("BuildConfig")
    packageName("tech.harmless.simplecupbuilder")

    buildConfigField("String", "NAME", "\"${rootProject.name}\"")
    buildConfigField("String", "VERSION", "\"${version}\"")
    buildConfigField("String", "AUTHOR_NAME", "\"Harmless_Tech\"")
    buildConfigField("String", "BUILD_TIME", "\"${new Date()}\"")

    sourceSets.getByName("test") {
        className("BuildConfig")
        packageName("tests")

        buildConfigField("String", "TEST", "\"Test\"")
    }
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    // All
    implementation group: "com.github.jezza", name: "toml", version: "1.2"
    implementation group: "com.google.code.gson", name: "gson", version: "2.8.6"

    // Annotations
    compileOnly group: "org.projectlombok", name: "lombok", version: "1.18.16"
    annotationProcessor group: "org.projectlombok", name: "lombok", version: "1.18.16"

    compileOnly group: "org.jetbrains", name: "annotations", version: "20.1.0"
    annotationProcessor group: "org.jetbrains", name: "annotations", version: "20.1.0"

    compileOnly group: "com.github.spotbugs", name: "spotbugs-annotations", version: "4.2.0"
    annotationProcessor group: "com.github.spotbugs", name: "spotbugs-annotations", version: "4.2.0"

    // Bugs
    spotbugs group: "com.github.spotbugs", name: "spotbugs", version: "4.2.0"
    spotbugsPlugins group: "com.h3xstream.findsecbugs", name: "findsecbugs-plugin", version: "1.11.0"

    // Tests
    testImplementation group: "org.junit.jupiter", name: "junit-jupiter-api", version: "5.7.0"
    testRuntimeOnly group: "org.junit.jupiter", name: "junit-jupiter-engine", version: "5.7.0"
}

plugins.withType(JavaPlugin).configureEach {
    java {
        modularity.inferModulePath = true
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

mainClassName = project.group + ".SimpleCupBuilder"

task copyDeps(type: Copy) {
    from configurations.runtimeClasspath
    into "$buildDir/libs"
}

jar {
    dependsOn "copyDeps"

    manifest {
        attributes(
                "Main-Class": project.mainClassName
        )
    }
}

application {
    mainModule.set(project.group as String)
    mainClass.set(project.mainClassName)
    applicationDefaultJvmArgs = ["-Dfile.encoding=UTF-8", "-Xmx2048m"]
}

task debug {
    group = "application"
    description = "Runs the program with assertions and custom debug args."

    run {
        args = ["--debug"]
    }

    doLast {
        application.applicationDefaultJvmArgs.asList().add("-ea")
    }

    finalizedBy "run"
}

spotbugs {
    showProgress.set(true)
    ignoreFailures.set(true)
}

spotbugsMain {
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            stylesheet = "fancy-hist.xsl"
        }
    }
}

spotbugsTest.onlyIf { false }
shadowJar.onlyIf { false }
shadowDistZip.onlyIf { false }
shadowDistTar.onlyIf { false }
distZip.onlyIf { false }
distTar.onlyIf { false }

def os = OperatingSystem.current();
jlink {
    options = ["--bind-services", "--strip-debug", "--compress", "2", "--no-header-files", "--no-man-pages"]

    launcher {
        noConsole = false
    }
    jpackage {
        jvmArgs = ["-Dfile.encoding=UTF-8"]

        imageName = project.name
        appVersion = project.version.split("-")[0]

        //def imgType = os.windows ? 'ico' : os.macOsX ? 'icns' : 'png'
        //icon = "src/main/resources/icon.$imgType"

        // Broken (JDK-16 maybe fixes)
        skipInstaller = true
        /*installerName = project.name
        if(os.windows) {
            installerName += "-Win64-Installer"
            installerType = "msi"
            installerOptions += ["--win-dir-chooser", "--win-menu", "--win-menu-group", "Harmless_Tech", "--win-shortcut"]
        }
        else if(os.linux) {
            installerName += "-Linux64-Installer"
            installerType = "rpm"
            installerOptions += ["--linux-menu-group", "Harmless_Tech", "--linux-shortcut"]
        }
        else if(os.macOsX) {
            installerName += "-MacOS-Installer"
            installerType = "pkg"
        }*/
    }
}
tasks.jpackageImage.doLast {
    /*copy {
        from listNativePaths()
        into "$buildDir/jpackage/$project.name/app/natives"
    }*/
    /*exec {
        workingDir "$buildDir"
        if(os.windows) {
            commandLine "$System.env.JAVA_16_HOME/bin/jpackage", "--type", "exe", "--dest", "$buildDir/jpackage",
                    "--name", project.name + "-Win64-Installer", "--app-version", project.version.split("-")[0],
                    "--app-image", "$buildDir/jpackage/" + project.name, "--vendor", "Harmless_Tech",
                    "--win-dir-chooser", "--win-menu", "--win-menu-group", "Harmless_Tech", "--win-shortcut",
                    "--win-console"
        }
        else
            println("jPackage installer not configured for this os yet.")
    }*/
}

test {
    useJUnitPlatform()
}
